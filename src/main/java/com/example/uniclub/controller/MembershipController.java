package com.example.uniclub.controller;

import com.example.uniclub.dto.ApiResponse;
import com.example.uniclub.dto.response.MembershipResponse;
import com.example.uniclub.security.CustomUserDetails;
import com.example.uniclub.service.MembershipService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api")
@RequiredArgsConstructor
public class MembershipController {

    private final MembershipService membershipService;

    // ============================================================
    // üü© 1Ô∏è‚É£ CLUB ‚Üí MEMBERS RELATIONS
    // ============================================================

    /** üîπ L·∫•y t·∫•t c·∫£ th√†nh vi√™n c·ªßa 1 CLB */
    @GetMapping("/clubs/{clubId}/members")
    @PreAuthorize("hasAnyRole('CLUB_LEADER','VICE_LEADER','STUDENT')")
    public ResponseEntity<ApiResponse<List<MembershipResponse>>> getAllMembers(
            @PathVariable Long clubId) {
        return ResponseEntity.ok(ApiResponse.ok(membershipService.getMembersByClub(clubId)));
    }

    /** üîπ L·∫•y danh s√°ch ƒë∆°n ch·ªù duy·ªát c·ªßa CLB */
    @GetMapping("/clubs/{clubId}/members/pending")
    @PreAuthorize("hasAnyRole('CLUB_LEADER','VICE_LEADER')")
    public ResponseEntity<ApiResponse<List<MembershipResponse>>> getPendingMembers(
            @PathVariable Long clubId) {
        return ResponseEntity.ok(ApiResponse.ok(membershipService.getPendingMembers(clubId)));
    }

    /** üîπ L·∫•y danh s√°ch Staff c·ªßa CLB */
    @GetMapping("/clubs/{clubId}/members/staff")
    @PreAuthorize("hasAnyRole('CLUB_LEADER','VICE_LEADER')")
    public ResponseEntity<ApiResponse<List<MembershipResponse>>> getStaffMembers(
            @PathVariable Long clubId) {
        return ResponseEntity.ok(ApiResponse.ok(membershipService.getStaffMembers(clubId)));
    }

    /** üîπ Sinh vi√™n tham gia CLB */
    @PostMapping("/clubs/{clubId}/join")
    @PreAuthorize("hasRole('STUDENT')")
    public ResponseEntity<ApiResponse<MembershipResponse>> joinClub(
            @PathVariable Long clubId,
            @AuthenticationPrincipal CustomUserDetails user) {
        return ResponseEntity.ok(ApiResponse.ok(membershipService.joinClub(user.getId(), clubId)));
    }

    // ============================================================
    // üü® 2Ô∏è‚É£ MEMBERSHIP MANAGEMENT (Admin, Leader)
    // ============================================================

    /** üîπ L·∫•y danh s√°ch th√†nh vi√™n theo t√™n Leader (Admin / Staff) */
    @GetMapping("/members")
    @PreAuthorize("hasAnyRole('ADMIN','UNIVERSITY_STAFF')")
    public ResponseEntity<ApiResponse<List<MembershipResponse>>> getMembersByLeaderName(
            @RequestParam(required = false) String leaderName) {
        return ResponseEntity.ok(ApiResponse.ok(membershipService.getMembersByLeaderName(leaderName)));
    }

    /** üîπ Duy·ªát ƒë∆°n tham gia CLB */
    @PatchMapping("/memberships/{membershipId}/approve")
    @PreAuthorize("hasAnyRole('CLUB_LEADER','VICE_LEADER')")
    public ResponseEntity<ApiResponse<MembershipResponse>> approveMember(
            @PathVariable Long membershipId,
            @AuthenticationPrincipal CustomUserDetails user) {
        return ResponseEntity.ok(ApiResponse.ok(membershipService.approveMember(membershipId, user.getId())));
    }

    /** üîπ T·ª´ ch·ªëi ƒë∆°n tham gia CLB */
    @PatchMapping("/memberships/{membershipId}/reject")
    @PreAuthorize("hasAnyRole('CLUB_LEADER','VICE_LEADER')")
    public ResponseEntity<ApiResponse<MembershipResponse>> rejectMember(
            @PathVariable Long membershipId,
            @RequestParam(required = false) String reason,
            @AuthenticationPrincipal CustomUserDetails user) {
        return ResponseEntity.ok(ApiResponse.ok(membershipService.rejectMember(membershipId, user.getId(), reason)));
    }

    /** üîπ C·∫≠p nh·∫≠t vai tr√≤ c·ªßa th√†nh vi√™n (Leader Only) */
    @PutMapping("/memberships/{membershipId}/role")
    @PreAuthorize("hasRole('CLUB_LEADER')")
    public ResponseEntity<ApiResponse<MembershipResponse>> updateRole(
            @PathVariable Long membershipId,
            @RequestParam String newRole,
            @AuthenticationPrincipal CustomUserDetails user) {
        return ResponseEntity.ok(ApiResponse.ok(
                membershipService.updateRole(membershipId, user.getId(), newRole)
        ));
    }

    /** üîπ X√≥a ho·∫∑c h·ªßy k√≠ch ho·∫°t th√†nh vi√™n kh·ªèi CLB */
    @DeleteMapping("/memberships/{membershipId}")
    @PreAuthorize("hasRole('CLUB_LEADER')")
    public ResponseEntity<ApiResponse<Map<String, String>>> removeMember(
            @PathVariable Long membershipId,
            @AuthenticationPrincipal CustomUserDetails user) {
        membershipService.removeMember(membershipId, user.getId());
        return ResponseEntity.ok(ApiResponse.ok(Map.of("message", "Member removed successfully")));
    }

    // ============================================================
    // üîµ 3Ô∏è‚É£ USER ‚Üí PERSONAL MEMBERSHIPS
    // ============================================================

    /** üîπ Xem danh s√°ch CLB m√† user hi·ªán t·∫°i tham gia */
    @GetMapping("/users/me/clubs")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<ApiResponse<List<MembershipResponse>>> getMyClubs(
            @AuthenticationPrincipal CustomUserDetails user) {
        return ResponseEntity.ok(ApiResponse.ok(membershipService.getMyMemberships(user.getId())));
    }
    @PatchMapping("/memberships/{membershipId}/kick")
    @PreAuthorize("hasAnyRole('CLUB_LEADER','VICE_LEADER')")
    public ResponseEntity<ApiResponse<String>> kickMember(
            @PathVariable Long membershipId,
            @AuthenticationPrincipal CustomUserDetails user) {
        return ResponseEntity.ok(ApiResponse.ok(
                membershipService.kickMember(user, membershipId)
        ));
    }

}
