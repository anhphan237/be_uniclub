package com.example.uniclub.controller;

import com.example.uniclub.dto.ApiResponse;
import com.example.uniclub.dto.request.ProfileUpdateRequest;
import com.example.uniclub.entity.User;
import com.example.uniclub.service.impl.UserServiceImpl;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;

/**
 * ‚úÖ Cho ph√©p t·∫•t c·∫£ ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p (m·ªçi role)
 * xem v√† c·∫≠p nh·∫≠t h·ªì s∆° c√° nh√¢n c·ªßa ch√≠nh m√¨nh.
 */
@RestController
@RequestMapping("/api/users/profile")
@RequiredArgsConstructor
public class ProfileController {

    private final UserServiceImpl userService;

    // ‚úÖ Xem th√¥ng tin profile c·ªßa ch√≠nh m√¨nh
    @GetMapping
    @PreAuthorize("isAuthenticated()") // üîì cho ph√©p t·∫•t c·∫£ role ƒë√£ ƒëƒÉng nh·∫≠p
    public ResponseEntity<ApiResponse<User>> getProfile(
            @AuthenticationPrincipal UserDetails principal) {

        String email = principal.getUsername();
        User profile = userService.getProfile(email);
        return ResponseEntity.ok(ApiResponse.ok(profile));
    }

    // ‚úÖ C·∫≠p nh·∫≠t profile c·ªßa ch√≠nh m√¨nh
    @PutMapping
    @PreAuthorize("isAuthenticated()") // üîì cho ph√©p t·∫•t c·∫£ role ƒë√£ ƒëƒÉng nh·∫≠p
    public ResponseEntity<ApiResponse<User>> updateProfile(
            @AuthenticationPrincipal UserDetails principal,
            @RequestBody ProfileUpdateRequest req) {

        String email = principal.getUsername();
        User updated = userService.updateProfile(email, req);
        return ResponseEntity.ok(ApiResponse.ok(updated));
    }
    // ‚úÖ C·∫≠p nh·∫≠t avatar URL th·ªß c√¥ng (n·∫øu kh√¥ng d√πng Google)
    @PatchMapping("/avatar")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<ApiResponse<User>> updateAvatar(
            @AuthenticationPrincipal UserDetails principal,
            @RequestParam String avatarUrl) {

        String email = principal.getUsername();
        User updated = userService.updateAvatar(email, avatarUrl);
        return ResponseEntity.ok(ApiResponse.ok(updated));
    }

}
