package com.example.uniclub.controller;

import com.example.uniclub.dto.ApiResponse;
import com.example.uniclub.dto.request.MemberApplicationCreateRequest;
import com.example.uniclub.dto.request.MemberApplicationStatusUpdateRequest;
import com.example.uniclub.dto.response.MemberApplicationResponse;
import com.example.uniclub.dto.response.MemberApplicationStatsResponse;
import com.example.uniclub.security.CustomUserDetails;
import com.example.uniclub.service.MemberApplicationService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequiredArgsConstructor
@RequestMapping("/api/member-applications")
public class MemberApplicationController {

    private final MemberApplicationService service;

    // üü¢ [POST] Sinh vi√™n n·ªôp ƒë∆°n ·ª©ng tuy·ªÉn
    @PostMapping
    @PreAuthorize("hasRole('STUDENT')")
    public ResponseEntity<MemberApplicationResponse> create(
            @AuthenticationPrincipal UserDetails principal,
            @Valid @RequestBody MemberApplicationCreateRequest req) {
        return ResponseEntity.ok(service.createByEmail(principal.getUsername(), req));
    }

    // üü° [PUT] Leader/Admin c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n
    @PutMapping("/{id}/status")
    @PreAuthorize("hasAnyRole('ADMIN','UNIVERSITY_STAFF','CLUB_LEADER')")
    public ResponseEntity<MemberApplicationResponse> updateStatus(
            @PathVariable Long id,
            @AuthenticationPrincipal UserDetails principal,
            @Valid @RequestBody MemberApplicationStatusUpdateRequest req) {
        return ResponseEntity.ok(service.updateStatusByEmail(principal.getUsername(), id, req));
    }

    // üîµ [GET] L·∫•y danh s√°ch ƒë∆°n (student ‚Üí c·ªßa m√¨nh, leader ‚Üí t·∫•t c·∫£)
    @GetMapping
    @PreAuthorize("hasAnyRole('ADMIN','UNIVERSITY_STAFF','CLUB_LEADER','STUDENT')")
    public ResponseEntity<List<MemberApplicationResponse>> getApplications(
            @AuthenticationPrincipal UserDetails principal) {
        return ResponseEntity.ok(service.findApplicationsByEmail(principal.getUsername()));
    }

    // üü£ [GET] Xem ƒë∆°n theo CLB
    @GetMapping("/club/{clubId}")
    @PreAuthorize("hasAnyRole('ADMIN','UNIVERSITY_STAFF','CLUB_LEADER')")
    public ResponseEntity<List<MemberApplicationResponse>> getByClubId(
            @AuthenticationPrincipal CustomUserDetails principal,
            @PathVariable Long clubId) {
        return ResponseEntity.ok(service.getByClubId(principal, clubId));
    }

    // üü¢ [GET] Xem ƒë∆°n c·ªßa ch√≠nh m√¨nh
    @GetMapping("/my")
    @PreAuthorize("hasRole('STUDENT')")
    public ResponseEntity<ApiResponse<List<MemberApplicationResponse>>> getMyApplications(
            @AuthenticationPrincipal CustomUserDetails principal) {
        return ResponseEntity.ok(ApiResponse.ok(service.findApplicationsByEmail(principal.getUsername())));
    }

    // üü† [GET] Xem chi ti·∫øt 1 ƒë∆°n
    @GetMapping("/{id}")
    @PreAuthorize("hasAnyRole('ADMIN','UNIVERSITY_STAFF','CLUB_LEADER','VICE_LEADER','STUDENT')")
    public ResponseEntity<ApiResponse<MemberApplicationResponse>> getById(
            @PathVariable Long id,
            @AuthenticationPrincipal CustomUserDetails principal) {
        return ResponseEntity.ok(ApiResponse.ok(service.getApplicationById(principal, id)));
    }

    // üî¥ [DELETE] Sinh vi√™n h·ªßy ƒë∆°n c·ªßa m√¨nh
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('STUDENT')")
    public ResponseEntity<ApiResponse<String>> cancelApplication(
            @PathVariable Long id,
            @AuthenticationPrincipal CustomUserDetails principal) {
        service.cancelApplication(principal, id);
        return ResponseEntity.ok(ApiResponse.ok("Application cancelled successfully"));
    }

    // üü£ [GET] L·∫•y danh s√°ch ƒë∆°n pending c·ªßa CLB
    @GetMapping("/club/{clubId}/pending")
    @PreAuthorize("hasAnyRole('ADMIN','CLUB_LEADER','VICE_LEADER')")
    public ResponseEntity<ApiResponse<List<MemberApplicationResponse>>> getPendingApplications(
            @PathVariable Long clubId,
            @AuthenticationPrincipal CustomUserDetails principal) {
        return ResponseEntity.ok(ApiResponse.ok(service.getPendingByClub(principal, clubId)));
    }

    // üü© [PUT] Duy·ªát ƒë∆°n
    @PutMapping("/{id}/approve")
    @PreAuthorize("hasAnyRole('ADMIN','CLUB_LEADER','VICE_LEADER')")
    public ResponseEntity<ApiResponse<MemberApplicationResponse>> approveApplication(
            @PathVariable Long id,
            @AuthenticationPrincipal CustomUserDetails principal) {
        return ResponseEntity.ok(ApiResponse.ok(service.approve(principal, id)));
    }

    // üü• [PUT] T·ª´ ch·ªëi ƒë∆°n
    @PutMapping("/{id}/reject")
    @PreAuthorize("hasAnyRole('ADMIN','CLUB_LEADER','VICE_LEADER')")
    public ResponseEntity<ApiResponse<MemberApplicationResponse>> rejectApplication(
            @PathVariable Long id,
            @Valid @RequestBody MemberApplicationStatusUpdateRequest req,
            @AuthenticationPrincipal CustomUserDetails principal) {
        return ResponseEntity.ok(ApiResponse.ok(service.reject(principal, id, req.getNote())));
    }

    // üìä [GET] Th·ªëng k√™ ƒë∆°n theo tr·∫°ng th√°i
    @GetMapping("/stats/{clubId}")
    @PreAuthorize("hasAnyRole('ADMIN','UNIVERSITY_STAFF','CLUB_LEADER')")
    public ResponseEntity<ApiResponse<MemberApplicationStatsResponse>> getClubStats(
            @PathVariable Long clubId) {
        return ResponseEntity.ok(ApiResponse.ok(service.getStatsByClub(clubId)));
    }

    // üü¢ [PATCH] C·∫≠p nh·∫≠t ghi ch√∫ n·ªôi b·ªô
    @PatchMapping("/{id}/note")
    @PreAuthorize("hasAnyRole('ADMIN','UNIVERSITY_STAFF','CLUB_LEADER','VICE_LEADER')")
    public ResponseEntity<ApiResponse<MemberApplicationResponse>> updateNote(
            @PathVariable Long id,
            @RequestBody String note,
            @AuthenticationPrincipal CustomUserDetails principal) {
        return ResponseEntity.ok(ApiResponse.ok(service.updateNoteForApplication(principal, id, note)));
    }

    // üü£ [GET] L·ªçc ƒë∆°n theo tr·∫°ng th√°i (Admin)
    @GetMapping("/status/{status}")
    @PreAuthorize("hasAnyRole('ADMIN','UNIVERSITY_STAFF')")
    public ResponseEntity<ApiResponse<List<MemberApplicationResponse>>> getByStatus(@PathVariable String status) {
        return ResponseEntity.ok(ApiResponse.ok(service.getApplicationsByStatus(status)));
    }

    // üü° [GET] 10 ƒë∆°n g·∫ßn nh·∫•t (Admin dashboard)
    @GetMapping("/recent")
    @PreAuthorize("hasAnyRole('ADMIN','UNIVERSITY_STAFF')")
    public ResponseEntity<ApiResponse<List<MemberApplicationResponse>>> getRecent() {
        return ResponseEntity.ok(ApiResponse.ok(service.getRecentApplications()));
    }

    // üü¢ [GET] Th·ªëng k√™ ƒë∆°n theo ng√†y (7 ng√†y g·∫ßn nh·∫•t)
    @GetMapping("/club/{clubId}/stats/daily")
    @PreAuthorize("hasAnyRole('ADMIN','UNIVERSITY_STAFF','CLUB_LEADER')")
    public ResponseEntity<ApiResponse<List<MemberApplicationStatsResponse>>> getDailyStats(
            @PathVariable Long clubId) {
        return ResponseEntity.ok(ApiResponse.ok(service.getDailyStats(clubId)));
    }

    // üîµ [GET] Admin xem ƒë∆°n theo userId
    @GetMapping("/applicant/{userId}")
    @PreAuthorize("hasAnyRole('ADMIN','UNIVERSITY_STAFF')")
    public ResponseEntity<ApiResponse<List<MemberApplicationResponse>>> getByApplicant(@PathVariable Long userId) {
        return ResponseEntity.ok(ApiResponse.ok(service.getApplicationsByApplicant(userId)));
    }

    // üü† [PUT] Sinh vi√™n g·ª≠i l·∫°i ƒë∆°n b·ªã t·ª´ ch·ªëi
    @PutMapping("/{id}/resubmit")
    @PreAuthorize("hasRole('STUDENT')")
    public ResponseEntity<ApiResponse<MemberApplicationResponse>> resubmit(
            @PathVariable Long id,
            @AuthenticationPrincipal CustomUserDetails principal,
            @RequestBody MemberApplicationCreateRequest req) {
        return ResponseEntity.ok(ApiResponse.ok(service.resubmitApplication(principal, id, req)));
    }

    // üü§ [GET] ƒê∆°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω (Approved ho·∫∑c Rejected)
    @GetMapping("/club/{clubId}/handled")
    @PreAuthorize("hasAnyRole('ADMIN','CLUB_LEADER','VICE_LEADER')")
    public ResponseEntity<ApiResponse<List<MemberApplicationResponse>>> getHandled(
            @PathVariable Long clubId,
            @AuthenticationPrincipal CustomUserDetails principal) {
        return ResponseEntity.ok(ApiResponse.ok(service.getHandledApplications(principal, clubId)));
    }

}
