package com.example.uniclub.controller;

import com.example.uniclub.dto.ApiResponse;
import com.example.uniclub.dto.request.*;
import com.example.uniclub.dto.response.EventResponse;
import com.example.uniclub.security.CustomUserDetails;
import com.example.uniclub.service.EventPointsService;
import com.example.uniclub.service.EventService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/events")
@RequiredArgsConstructor
public class EventController {

    private final EventService eventService;
    private final EventPointsService eventPointsService;

    // =========================================================
    // üîπ 1. CRUD APIs (Qu·∫£n l√Ω s·ª± ki·ªán)
    // =========================================================

    /**
     * [1] T·∫°o m·ªõi s·ª± ki·ªán
     * Roles: ADMIN, CLUB_LEADER
     * Method: POST /api/events
     */
    @PostMapping
    @PreAuthorize("hasAnyRole('ADMIN','CLUB_LEADER')")
    public ResponseEntity<ApiResponse<EventResponse>> createEvent(
            @Valid @RequestBody EventCreateRequest req) {
        return ResponseEntity.ok(ApiResponse.ok(eventService.create(req)));
    }


    /**
     * [2] Xem chi ti·∫øt m·ªôt s·ª± ki·ªán
     * Roles: Public (ai c≈©ng xem ƒë∆∞·ª£c)
     * Method: GET /api/events/{id}
     */
    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<EventResponse>> get(@PathVariable Long id) {
        return ResponseEntity.ok(ApiResponse.ok(eventService.get(id)));
    }

    /**
     * [3] Danh s√°ch t·∫•t c·∫£ s·ª± ki·ªán (c√≥ ph√¢n trang)
     * Roles: Public
     * Method: GET /api/events
     */
    @GetMapping
    public ResponseEntity<?> list(Pageable pageable) {
        return ResponseEntity.ok(eventService.list(pageable));
    }

    /**
     * [4] C·∫≠p nh·∫≠t tr·∫°ng th√°i s·ª± ki·ªán (duy·ªát / t·ª´ ch·ªëi)
     * Roles: UNIVERSITY_STAFF
     * Method: PUT /api/events/{id}/status
     */
    @PutMapping("/{id}/status")
    @PreAuthorize("hasRole('UNIVERSITY_STAFF')")
    public ResponseEntity<ApiResponse<EventResponse>> updateStatus(
            @AuthenticationPrincipal CustomUserDetails principal,
            @PathVariable Long id,
            @Valid @RequestBody EventStatusUpdateRequest req) {
        return ResponseEntity.ok(ApiResponse.ok(
                eventService.updateStatus(principal, id, req.getStatus())
        ));
    }

    /**
     * [5] X√≥a s·ª± ki·ªán
     * Roles: ADMIN, CLUB_LEADER
     * Method: DELETE /api/events/{id}
     */
    @DeleteMapping("/{id}")
    @PreAuthorize("hasAnyRole('ADMIN','CLUB_LEADER')")
    public ResponseEntity<ApiResponse<String>> delete(@PathVariable Long id) {
        eventService.delete(id);
        return ResponseEntity.ok(ApiResponse.msg("Deleted"));
    }

    // =========================================================
    // üîπ 2. PARTICIPATION APIs (ƒêƒÉng k√Ω - Check-in - H·ªßy)
    // =========================================================

    /**
     * [6] ƒêƒÉng k√Ω tham gia s·ª± ki·ªán
     * Roles: STUDENT
     * Method: POST /api/events/register
     */
    @PostMapping("/register")
    @PreAuthorize("hasRole('STUDENT')")
    public ResponseEntity<ApiResponse<String>> register(
            @AuthenticationPrincipal CustomUserDetails principal,
            @Valid @RequestBody EventRegisterRequest req) {
        return ResponseEntity.ok(ApiResponse.msg(eventPointsService.register(principal, req)));
    }

    /**
     * [7] Check-in tham gia s·ª± ki·ªán (qu√©t m√£ QR)
     * Roles: STUDENT
     * Method: POST /api/events/checkin
     */
    @PostMapping("/checkin")
    @PreAuthorize("hasRole('STUDENT')")
    public ResponseEntity<ApiResponse<String>> checkin(
            @AuthenticationPrincipal CustomUserDetails principal,
            @Valid @RequestBody EventCheckinRequest req) {
        return ResponseEntity.ok(ApiResponse.msg(eventPointsService.checkin(principal, req)));
    }

    /**
     * [8] H·ªßy ƒëƒÉng k√Ω s·ª± ki·ªán
     * Roles: STUDENT
     * Method: PUT /api/events/{eventId}/cancel
     */
    @PutMapping("/{eventId}/cancel")
    @PreAuthorize("hasRole('STUDENT')")
    public ResponseEntity<ApiResponse<String>> cancelRegistration(
            @AuthenticationPrincipal CustomUserDetails principal,
            @PathVariable Long eventId) {
        return ResponseEntity.ok(ApiResponse.msg(eventPointsService.cancelRegistration(principal, eventId)));
    }

    /**
     * [9] K·∫øt th√∫c s·ª± ki·ªán - t√≠nh ƒëi·ªÉm th∆∞·ªüng, ho√†n ƒëi·ªÉm
     * Roles: CLUB_LEADER, UNIVERSITY_STAFF
     * Method: PUT /api/events/end
     */
    @PutMapping("/end")
    @PreAuthorize("hasAnyRole('CLUB_LEADER','UNIVERSITY_STAFF')")
    public ResponseEntity<ApiResponse<String>> endEvent(
            @AuthenticationPrincipal CustomUserDetails principal,
            @Valid @RequestBody EventEndRequest req) {
        return ResponseEntity.ok(ApiResponse.msg(eventPointsService.endEvent(principal, req)));
    }

    // =========================================================
    // üîπ 3. LOOKUP APIs (Truy v·∫•n, tra c·ª©u)
    // =========================================================

    /**
     * [10] L·∫•y danh s√°ch s·ª± ki·ªán c·ªßa m·ªôt CLB c·ª• th·ªÉ
     * Roles: ADMIN, UNIVERSITY_STAFF, CLUB_LEADER, STUDENT
     * Method: GET /api/events/club/{clubId}
     */
    @GetMapping("/club/{clubId}")
    @PreAuthorize("hasAnyRole('ADMIN','UNIVERSITY_STAFF','CLUB_LEADER','STUDENT')")
    public ResponseEntity<List<EventResponse>> getByClubId(@PathVariable Long clubId) {
        return ResponseEntity.ok(eventService.getByClubId(clubId));
    }

    /**
     * [11] T√¨m s·ª± ki·ªán qua m√£ check-in (QR code)
     * Roles: ADMIN, UNIVERSITY_STAFF, CLUB_LEADER, STUDENT
     * Method: GET /api/events/code/{code}
     */
    @GetMapping("/code/{code}")
    @PreAuthorize("hasAnyRole('ADMIN','UNIVERSITY_STAFF','CLUB_LEADER','STUDENT')")
    public ResponseEntity<ApiResponse<EventResponse>> getByCheckInCode(@PathVariable String code) {
        return ResponseEntity.ok(ApiResponse.ok(eventService.findByCheckInCode(code)));
    }

    // =========================================================
    // üîπ 4. EXTENSIONS (B√°o c√°o, th·ªëng k√™, nh√¢n b·∫£n)
    // =========================================================

    /**
     * [12] Xem danh s√°ch ng∆∞·ªùi ƒëƒÉng k√Ω c·ªßa s·ª± ki·ªán
     * Roles: CLUB_LEADER, UNIVERSITY_STAFF
     * Method: GET /api/events/{eventId}/registrations
     */
    @GetMapping("/{eventId}/registrations")
    @PreAuthorize("hasAnyRole('CLUB_LEADER','UNIVERSITY_STAFF')")
    public ResponseEntity<ApiResponse<?>> getEventRegistrations(@PathVariable Long eventId) {
        return ResponseEntity.ok(ApiResponse.ok(eventPointsService.getEventRegistrations(eventId)));
    }

    /**
     * [13] Xem th·ªëng k√™ s·ª± ki·ªán (t·ªïng ng∆∞·ªùi tham gia, ƒëi·ªÉm ƒë√£ chi, v.v.)
     * Roles: CLUB_LEADER, UNIVERSITY_STAFF
     * Method: GET /api/events/{eventId}/summary
     */
    @GetMapping("/{eventId}/summary")
    @PreAuthorize("hasAnyRole('CLUB_LEADER','UNIVERSITY_STAFF')")
    public ResponseEntity<ApiResponse<?>> getEventSummary(@PathVariable Long eventId) {
        return ResponseEntity.ok(ApiResponse.ok(eventPointsService.getEventSummary(eventId)));
    }

    /**
     * [14] Xem v√≠ ƒëi·ªÉm c·ªßa s·ª± ki·ªán (ch·ªâ staff ƒë∆∞·ª£c xem)
     * Roles: UNIVERSITY_STAFF
     * Method: GET /api/events/{eventId}/wallet
     */
    @GetMapping("/{eventId}/wallet")
    @PreAuthorize("hasRole('UNIVERSITY_STAFF')")
    public ResponseEntity<ApiResponse<?>> getEventWallet(@PathVariable Long eventId) {
        return ResponseEntity.ok(ApiResponse.ok(eventPointsService.getEventWallet(eventId)));
    }

    /**
     * [15] L·∫•y danh s√°ch s·ª± ki·ªán s·∫Øp t·ªõi (Upcoming)
     * Roles: STUDENT
     * Method: GET /api/events/upcoming
     */
    @GetMapping("/upcoming")
    @PreAuthorize("hasRole('STUDENT')")
    public ResponseEntity<ApiResponse<?>> getUpcomingEvents() {
        return ResponseEntity.ok(ApiResponse.ok(eventService.getUpcomingEvents()));
    }

    /**
     * [16] L·∫•y danh s√°ch s·ª± ki·ªán c√° nh√¢n c·ªßa ng∆∞·ªùi d√πng
     * Roles: STUDENT
     * Method: GET /api/events/my
     */
    @GetMapping("/my")
    @PreAuthorize("hasRole('STUDENT')")
    public ResponseEntity<ApiResponse<?>> getMyEvents(@AuthenticationPrincipal CustomUserDetails principal) {
        return ResponseEntity.ok(ApiResponse.ok(eventService.getMyEvents(principal)));
    }

    /**
     * [17] Nh√¢n b·∫£n s·ª± ki·ªán sang h·ªçc k·ª≥ k·∫ø ti·∫øp
     * Roles: CLUB_LEADER
     * Method: POST /api/events/{eventId}/clone
     */
    @PostMapping("/{eventId}/clone")
    @PreAuthorize("hasRole('CLUB_LEADER')")
    public ResponseEntity<ApiResponse<EventResponse>> cloneEvent(@PathVariable Long eventId) {
        return ResponseEntity.ok(ApiResponse.ok(eventService.cloneEvent(eventId)));
    }
}
