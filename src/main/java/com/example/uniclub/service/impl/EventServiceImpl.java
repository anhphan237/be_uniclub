package com.example.uniclub.service.impl;

import com.example.uniclub.dto.request.EventCreateRequest;
import com.example.uniclub.dto.response.EventRegistrationResponse;
import com.example.uniclub.dto.response.EventResponse;
import com.example.uniclub.dto.response.EventStaffResponse;
import com.example.uniclub.entity.*;
import com.example.uniclub.enums.*;
import com.example.uniclub.exception.ApiException;
import com.example.uniclub.repository.*;
import com.example.uniclub.security.CustomUserDetails;
import com.example.uniclub.service.EventService;
import com.example.uniclub.service.NotificationService;
import com.example.uniclub.service.RewardService;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;
import lombok.extern.slf4j.Slf4j;
@Slf4j
@Service
@RequiredArgsConstructor
public class EventServiceImpl implements EventService {

    private final EventRepository eventRepo;
    private final ClubRepository clubRepo;
    private final LocationRepository locationRepo;
    private final UserRepository userRepo;
    private final MembershipRepository membershipRepo;
    private final NotificationService notificationService;
    private final RewardService rewardService;
    private final WalletRepository walletRepo;
    private final EventStaffRepository eventStaffRepo;
    private final EventRegistrationRepository eventRegistrationRepo;

    // =================================================================
    // üîπ MAPPER
    // =================================================================
    private EventResponse mapToResponse(Event event) {
        return EventResponse.builder()
                .id(event.getEventId())
                .name(event.getName())
                .description(event.getDescription())
                .type(event.getType())
                .date(event.getDate())
                .startTime(event.getStartTime())
                .endTime(event.getEndTime())
                .status(event.getStatus())
                .checkInCode(event.getCheckInCode())
                .locationName(event.getLocation() != null ? event.getLocation().getName() : null)
                .maxCheckInCount(event.getMaxCheckInCount())
                .currentCheckInCount(event.getCurrentCheckInCount())
                .budgetPoints(event.getBudgetPoints())
                .hostClub(new EventResponse.SimpleClub(
                        event.getHostClub().getClubId(),
                        event.getHostClub().getName(),
                        EventCoHostStatusEnum.APPROVED
                ))
                .coHostedClubs(event.getCoHostRelations() == null ? List.of() :
                        event.getCoHostRelations().stream()
                                .map(rel -> new EventResponse.SimpleClub(
                                        rel.getClub().getClubId(),
                                        rel.getClub().getName(),
                                        rel.getStatus()))
                                .toList())
                .build();
    }

    // =================================================================
    // üîπ T·∫†O S·ª∞ KI·ªÜN
    // =================================================================
    @Override
    @Transactional
    public EventResponse create(EventCreateRequest req) {
        LocalDate today = LocalDate.now();

        if (req.date().isBefore(today))
            throw new ApiException(HttpStatus.BAD_REQUEST, "Ng√†y s·ª± ki·ªán kh√¥ng ƒë∆∞·ª£c ·ªü qu√° kh·ª©.");

        if (req.startTime() != null && req.endTime() != null && req.endTime().isBefore(req.startTime()))
            throw new ApiException(HttpStatus.BAD_REQUEST, "Th·ªùi gian k·∫øt th√∫c ph·∫£i sau th·ªùi gian b·∫Øt ƒë·∫ßu.");

        Location location = locationRepo.findById(req.locationId())
                .orElseThrow(() -> new ApiException(HttpStatus.NOT_FOUND, "ƒê·ªãa ƒëi·ªÉm kh√¥ng t·ªìn t·∫°i."));

        if (req.maxCheckInCount() != null && req.maxCheckInCount() > location.getCapacity())
            throw new ApiException(HttpStatus.BAD_REQUEST,
                    "ƒê·ªãa ƒëi·ªÉm ch·ªâ ch·ª©a t·ªëi ƒëa " + location.getCapacity() + " ng∆∞·ªùi.");

        Club hostClub = clubRepo.findById(req.hostClubId())
                .orElseThrow(() -> new ApiException(HttpStatus.NOT_FOUND, "CLB t·ªï ch·ª©c kh√¥ng t·ªìn t·∫°i."));

        List<Club> coHosts = (req.coHostClubIds() != null && !req.coHostClubIds().isEmpty())
                ? clubRepo.findAllById(req.coHostClubIds()) : List.of();

        if (req.budgetPoints() == null || req.budgetPoints() <= 0)
            throw new ApiException(HttpStatus.BAD_REQUEST, "Ng√¢n s√°ch ph·∫£i l·ªõn h∆°n 0.");

        Event event = Event.builder()
                .hostClub(hostClub)
                .name(req.name())
                .description(req.description())
                .type(req.type())
                .date(req.date())
                .startTime(req.startTime())
                .endTime(req.endTime())
                .location(location)
                .status(coHosts.isEmpty() ? EventStatusEnum.PENDING_UNISTAFF : EventStatusEnum.PENDING_COCLUB)
                .checkInCode("EVT-" + UUID.randomUUID().toString().substring(0, 8).toUpperCase())
                .maxCheckInCount(req.maxCheckInCount())
                .commitPointCost(req.commitPointCost())
                .rewardMultiplierCap(2)
                .budgetPoints(req.budgetPoints())
                .build();

        if (!coHosts.isEmpty()) {
            List<EventCoClub> coRelations = coHosts.stream()
                    .map(c -> EventCoClub.builder()
                            .event(event)
                            .club(c)
                            .status(EventCoHostStatusEnum.PENDING)
                            .build())
                    .toList();
            event.setCoHostRelations(coRelations);
        }

        eventRepo.save(event);

        if (coHosts.isEmpty()) {
            notificationService.notifyUniStaffReadyForReview(event);
        } else {
            coHosts.forEach(c -> notificationService.notifyCoHostInvite(c, event));
            notificationService.notifyUniStaffWaiting(event);
        }

        return mapToResponse(event);
    }

    // =================================================================
    // üîπ CO-HOST PH·∫¢N H·ªíI
    // =================================================================
    @Override
    @Transactional
    public String respondCoHost(Long eventId, CustomUserDetails principal, boolean accepted) {
        // üîπ 1. L·∫•y event
        Event event = eventRepo.findById(eventId)
                .orElseThrow(() -> new ApiException(HttpStatus.NOT_FOUND, "Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán."));

        // üîπ DEBUG log ƒë·∫ßu ti√™n
        log.info("DEBUG >>> userId={}, role=LEADER, state=ACTIVE", principal.getUser().getUserId());

        Long userId = principal.getUser().getUserId();

        // üîπ 2. T√¨m membership c·ªßa user c√≥ vai tr√≤ LEADER v√† ƒëang ACTIVE
        Membership leaderMembership = membershipRepo
                .findByUser_UserIdAndClubRoleAndState(
                        userId,
                        ClubRoleEnum.LEADER,
                        MembershipStateEnum.ACTIVE
                )
                .orElseThrow(() -> new ApiException(HttpStatus.FORBIDDEN, "B·∫°n kh√¥ng ph·∫£i l√† Leader h·ª£p l·ªá c·ªßa CLB n√†o."));

        // üîπ DEBUG log: x√°c nh·∫≠n membership
        log.info("DEBUG >>> LeaderMembership found: clubId={}", leaderMembership.getClub().getClubId());

        Club coClub = leaderMembership.getClub();

        // üîπ DEBUG log: danh s√°ch CLB ƒë·ªìng t·ªï ch·ª©c trong event
        log.info("DEBUG >>> Event {} coHostRelations: {}", eventId,
                event.getCoHostRelations().stream().map(r -> r.getClub().getClubId()).toList());

        // üîπ 3. Ki·ªÉm tra CLB n√†y c√≥ th·∫≠t s·ª± l√† Co-host c·ªßa event hay kh√¥ng
        boolean isCoHost = event.getCoHostRelations().stream()
                .anyMatch(r -> Objects.equals(r.getClub().getClubId(), coClub.getClubId()));

        if (!isCoHost) {
            throw new ApiException(HttpStatus.FORBIDDEN, "B·∫°n kh√¥ng ph·∫£i l√† Co-host c·ªßa s·ª± ki·ªán n√†y.");
        }

        // üîπ 4. L·∫•y quan h·ªá EventCoClub c·ª• th·ªÉ
        EventCoClub relation = event.getCoHostRelations().stream()
                .filter(r -> Objects.equals(r.getClub().getClubId(), coClub.getClubId()))
                .findFirst()
                .orElseThrow(() -> new ApiException(HttpStatus.BAD_REQUEST, "Kh√¥ng t√¨m th·∫•y quan h·ªá Co-host."));

        // üîπ 5. C·∫≠p nh·∫≠t tr·∫°ng th√°i ph·∫£n h·ªìi
        relation.setStatus(accepted ? EventCoHostStatusEnum.APPROVED : EventCoHostStatusEnum.REJECTED);
        relation.setRespondedAt(LocalDateTime.now());

        // üîπ 6. Log debug k·∫øt qu·∫£ ph·∫£n h·ªìi
        log.info("CoHostRespond >>> eventId={}, coClub={}, accepted={}", eventId, coClub.getName(), accepted);

        // üîπ 7. X·ª≠ l√Ω tr·∫°ng th√°i s·ª± ki·ªán
        long approved = event.getCoHostRelations().stream()
                .filter(r -> r.getStatus() == EventCoHostStatusEnum.APPROVED).count();
        long rejected = event.getCoHostRelations().stream()
                .filter(r -> r.getStatus() == EventCoHostStatusEnum.REJECTED).count();
        long total = event.getCoHostRelations().size();

        if (total == 1 && rejected == 1) {
            event.setStatus(EventStatusEnum.REJECTED);
            eventRepo.save(event);
            notificationService.notifyHostEventRejectedByCoHost(event, coClub);
            return "‚ùå Co-host duy nh·∫•t '" + coClub.getName() + "' ƒë√£ t·ª´ ch·ªëi. S·ª± ki·ªán b·ªã h·ªßy.";
        }

        if (approved > 0 && (approved + rejected == total)) {
            event.setStatus(EventStatusEnum.PENDING_UNISTAFF);

            // ‚úÖ Gi·ªØ orphanRemoval, ch·ªâ lo·∫°i b·ªè nh·ªØng cohost ch∆∞a approved thay v√¨ replace list
            event.getCoHostRelations().removeIf(r -> r.getStatus() != EventCoHostStatusEnum.APPROVED);

            eventRepo.save(event);
            notificationService.notifyUniStaffReadyForReview(event);
            return "‚úÖ M·ªôt s·ªë Co-host ƒë√£ ƒë·ªìng √Ω. S·ª± ki·ªán ƒë∆∞·ª£c g·ª≠i l√™n UniStaff duy·ªát.";
        }

        if (approved + rejected < total)
            return accepted
                    ? "‚úÖ Co-host '" + coClub.getName() + "' ƒë√£ ƒë·ªìng √Ω. Ch·ªù c√°c Co-host kh√°c ph·∫£n h·ªìi."
                    : "‚ùå Co-host '" + coClub.getName() + "' ƒë√£ t·ª´ ch·ªëi. Ch·ªù c√°c Co-host kh√°c ph·∫£n h·ªìi.";

        if (approved == total) {
            event.setStatus(EventStatusEnum.PENDING_UNISTAFF);
            eventRepo.save(event);
            notificationService.notifyUniStaffReadyForReview(event);
            return "‚úÖ T·∫•t c·∫£ Co-host ƒë√£ ƒë·ªìng √Ω. S·ª± ki·ªán chuy·ªÉn sang ch·ªù UniStaff duy·ªát.";
        }

        return "Ph·∫£n h·ªìi Co-host ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n.";
    }





    // =================================================================
    // üîπ DUY·ªÜT B·ªûI UNI STAFF
    // =================================================================
    @Override
    @Transactional
    public String reviewByUniStaff(Long eventId, boolean approve, CustomUserDetails principal, Integer budgetPoints) {
        Event event = eventRepo.findByIdWithCoHostRelations(eventId)
                .orElseThrow(() -> new ApiException(HttpStatus.NOT_FOUND, "Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán."));

        String role = principal.getRoleName();
        if (!List.of("UNIVERSITY_STAFF", "ADMIN").contains(role))
            throw new ApiException(HttpStatus.FORBIDDEN, "Ch·ªâ UniStaff ho·∫∑c Admin c√≥ quy·ªÅn duy·ªát s·ª± ki·ªán.");

        if (event.getStatus() != EventStatusEnum.PENDING_UNISTAFF)
            throw new ApiException(HttpStatus.BAD_REQUEST, "S·ª± ki·ªán ch∆∞a s·∫µn s√†ng ƒë·ªÉ UniStaff duy·ªát.");

        // ‚ùå N·∫øu b·ªã t·ª´ ch·ªëi
        if (!approve) {
            event.setStatus(EventStatusEnum.REJECTED);
            eventRepo.saveAndFlush(event); // ‚úÖ Flush ngay ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i
            notificationService.notifyEventRejected(event);
            return "‚ùå S·ª± ki·ªán b·ªã t·ª´ ch·ªëi b·ªüi UniStaff.";
        }

        // üîπ Ki·ªÉm tra ng√¢n s√°ch h·ª£p l·ªá
        if (budgetPoints == null || budgetPoints <= 0)
            throw new ApiException(HttpStatus.BAD_REQUEST, "Vui l√≤ng nh·∫≠p ng√¢n s√°ch h·ª£p l·ªá (>0).");

        // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† ng√¢n s√°ch
        event.setStatus(EventStatusEnum.APPROVED);
        event.setBudgetPoints(budgetPoints);

        // üîπ X·ª≠ l√Ω v√≠ c·ªßa s·ª± ki·ªán
        Wallet wallet = Optional.ofNullable(event.getWallet()).orElse(new Wallet());
        wallet.setOwnerType(WalletOwnerTypeEnum.EVENT);
        wallet.setEvent(event);

        // N·∫øu v√≠ m·ªõi t·∫°o ‚Üí kh·ªüi t·∫°o 0 ƒëi·ªÉm
        if (wallet.getBalancePoints() == null) wallet.setBalancePoints(0L);

        wallet.setBalancePoints(wallet.getBalancePoints() + budgetPoints);
        walletRepo.save(wallet);

        // üîπ G·∫Øn v√≠ v√†o event v√† flush ngay ƒë·ªÉ ƒë·∫£m b·∫£o c·∫≠p nh·∫≠t DB
        event.setWallet(wallet);
        eventRepo.saveAndFlush(event);

        // üîπ G·ª≠i th√¥ng b√°o
        notificationService.notifyEventApproved(event);

        // üîπ Log debug
        log.info("‚úÖ [REVIEW_BY_UNISTAFF] Event {} approved with {} points by {}",
                event.getEventId(), budgetPoints, role);

        return "‚úÖ S·ª± ki·ªán '" + event.getName() + "' ƒë√£ ƒë∆∞·ª£c UniStaff duy·ªát.";
    }


    // =================================================================
    // üîπ K·∫æT TH√öC S·ª∞ KI·ªÜN
    // =================================================================
    @Override
    @Transactional
    public String finishEvent(Long eventId, CustomUserDetails principal) {
        Event event = eventRepo.findById(eventId)
                .orElseThrow(() -> new ApiException(HttpStatus.NOT_FOUND, "Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán."));

        var user = principal.getUser();
        boolean isUniStaff = user.getRole().getRoleName().equals("UNIVERSITY_STAFF");
        boolean isLeader = membershipRepo.existsByUser_UserIdAndClub_ClubIdAndClubRoleIn(
                user.getUserId(),
                event.getHostClub().getClubId(),
                List.of(ClubRoleEnum.LEADER, ClubRoleEnum.VICE_LEADER)
        );

        if (!isUniStaff && !isLeader)
            throw new ApiException(HttpStatus.FORBIDDEN, "B·∫°n kh√¥ng c√≥ quy·ªÅn k·∫øt th√∫c s·ª± ki·ªán n√†y.");

        if (!List.of(EventStatusEnum.APPROVED, EventStatusEnum.ONGOING).contains(event.getStatus()))
            throw new ApiException(HttpStatus.BAD_REQUEST, "Ch·ªâ c√≥ th·ªÉ k·∫øt th√∫c s·ª± ki·ªán ƒë√£ duy·ªát ho·∫∑c ƒëang di·ªÖn ra.");

        event.setStatus(EventStatusEnum.COMPLETED);
        eventRepo.save(event);
        return "üü£ S·ª± ki·ªán '" + event.getName() + "' ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ho√†n th√†nh.";
    }

    // =================================================================
    // üîπ TRA C·ª®U & L·ªåC
    // =================================================================
    @Override
    public EventResponse get(Long id) {
        return eventRepo.findById(id)
                .map(this::mapToResponse)
                .orElseThrow(() -> new ApiException(HttpStatus.NOT_FOUND, "Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán."));
    }

    @Override
    public Page<EventResponse> list(Pageable pageable) {
        return eventRepo.findAll(pageable).map(this::mapToResponse);
    }

    @Override
    public Page<EventResponse> filter(String name, LocalDate date, EventStatusEnum status, Pageable pageable) {
        name = (name == null) ? "" : name;
        Page<Event> page;
        if (date != null && status != null) {
            page = eventRepo.findByNameContainingIgnoreCaseAndDateAndStatus(name, date, status, pageable);
        } else if (status != null) {
            page = eventRepo.findByNameContainingIgnoreCaseAndStatus(name, status, pageable);
        } else {
            page = eventRepo.findByNameContainingIgnoreCase(name, pageable);
        }
        return page.map(this::mapToResponse);
    }

    @Override
    public EventResponse findByCheckInCode(String code) {
        Event event = eventRepo.findByCheckInCode(code)
                .orElseThrow(() -> new ApiException(HttpStatus.NOT_FOUND, "M√£ check-in kh√¥ng h·ª£p l·ªá."));
        return mapToResponse(event);
    }

    @Override
    public List<EventResponse> getByClubId(Long clubId) {
        return eventRepo.findByClubParticipation(clubId)
                .stream().map(this::mapToResponse).toList();
    }

    @Override
    public List<EventResponse> getUpcomingEvents() {
        LocalDate today = LocalDate.now();
        return eventRepo.findByDateAfter(today).stream()
                .filter(e -> List.of(EventStatusEnum.APPROVED, EventStatusEnum.ONGOING).contains(e.getStatus()))
                .map(this::mapToResponse).toList();
    }

    @Override
    public List<EventResponse> getMyEvents(CustomUserDetails principal) {
        Long userId = principal.getUser().getUserId();
        return eventRepo.findEventsByUserId(userId).stream().map(this::mapToResponse).toList();
    }

    @Override
    public List<EventResponse> getActiveEvents() {
        LocalDate today = LocalDate.now();
        return eventRepo.findActiveEvents(EventStatusEnum.APPROVED, today).stream()
                .filter(e -> List.of(EventStatusEnum.APPROVED, EventStatusEnum.ONGOING).contains(e.getStatus()))
                .map(this::mapToResponse).toList();
    }

    @Override
    public List<EventResponse> getCoHostedEvents(Long clubId) {
        return eventRepo.findCoHostedEvents(clubId)
                .stream().map(this::mapToResponse).toList();
    }

    // =================================================================
    // üîπ STAFF
    // =================================================================
    @Override
    @Transactional
    public EventResponse assignStaff(CustomUserDetails principal, Long eventId, Long membershipId, String duty) {
        Event event = eventRepo.findById(eventId)
                .orElseThrow(() -> new ApiException(HttpStatus.NOT_FOUND, "Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán."));

        Membership actor = membershipRepo.findByUser_UserIdAndClub_ClubId(
                principal.getUser().getUserId(),
                event.getHostClub().getClubId()
        ).orElseThrow(() -> new ApiException(HttpStatus.FORBIDDEN, "B·∫°n kh√¥ng ph·∫£i th√†nh vi√™n CLB n√†y."));

        if (!List.of(ClubRoleEnum.LEADER, ClubRoleEnum.VICE_LEADER).contains(actor.getClubRole()))
            throw new ApiException(HttpStatus.FORBIDDEN, "Ch·ªâ Leader ho·∫∑c Vice Leader c√≥ quy·ªÅn g√°n Staff.");

        Membership target = membershipRepo.findById(membershipId)
                .orElseThrow(() -> new ApiException(HttpStatus.NOT_FOUND, "Kh√¥ng t√¨m th·∫•y th√†nh vi√™n."));
        if (!target.getClub().equals(event.getHostClub()))
            throw new ApiException(HttpStatus.BAD_REQUEST, "Th√†nh vi√™n kh√¥ng thu·ªôc CLB t·ªï ch·ª©c.");

        if (eventStaffRepo.existsByEvent_EventIdAndMembership_MembershipId(eventId, membershipId))
            throw new ApiException(HttpStatus.CONFLICT, "Th√†nh vi√™n ƒë√£ ƒë∆∞·ª£c g√°n v√†o s·ª± ki·ªán.");

        EventStaff staff = EventStaff.builder()
                .event(event)
                .membership(target)
                .duty(duty)
                .build();

        eventStaffRepo.save(staff);
        return mapToResponse(event);
    }

    @Override
    public List<EventStaffResponse> getEventStaffList(Long eventId) {
        Event event = eventRepo.findById(eventId)
                .orElseThrow(() -> new ApiException(HttpStatus.NOT_FOUND, "Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán."));
        return eventStaffRepo.findByEvent_EventId(eventId).stream()
                .map(s -> EventStaffResponse.builder()
                        .id(s.getId())
                        .eventId(eventId)
                        .eventName(event.getName())
                        .membershipId(s.getMembership().getMembershipId())
                        .memberName(s.getMembership().getUser() != null
                                ? s.getMembership().getUser().getFullName() : null)
                        .duty(s.getDuty())
                        .state(s.getState())
                        .assignedAt(s.getAssignedAt())
                        .unassignedAt(s.getUnassignedAt())
                        .build())
                .toList();
    }

    @Override
    public Event getEntity(Long id) {
        return eventRepo.findById(id)
                .orElseThrow(() -> new ApiException(HttpStatus.NOT_FOUND, "Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán."));
    }

    @Override
    @Transactional
    public void delete(Long id) {
        if (!eventRepo.existsById(id)) {
            throw new ApiException(HttpStatus.NOT_FOUND, "Event not found");
        }
        eventRepo.deleteById(id);
    }

    @Override
    @Transactional
    public String submitEventToUniStaff(Long eventId, CustomUserDetails principal) {
        Event event = eventRepo.findById(eventId)
                .orElseThrow(() -> new ApiException(HttpStatus.NOT_FOUND, "Event not found"));

        User user = userRepo.findById(principal.getUser().getUserId())
                .orElseThrow(() -> new ApiException(HttpStatus.NOT_FOUND, "User not found"));

        Club hostClub = event.getHostClub();
        boolean isHostLeader = user.getMemberships().stream()
                .anyMatch(m -> m.getClub().getClubId().equals(hostClub.getClubId())
                        && (m.getClubRole() == ClubRoleEnum.LEADER || m.getClubRole() == ClubRoleEnum.VICE_LEADER));

        if (!isHostLeader)
            throw new ApiException(HttpStatus.FORBIDDEN, "Only Host Club's Leader or Vice Leader can submit event.");

        if (event.getCoHostRelations() != null && !event.getCoHostRelations().isEmpty()) {
            boolean allApproved = event.getCoHostRelations().stream()
                    .allMatch(r -> r.getStatus() == EventCoHostStatusEnum.APPROVED);
            if (!allApproved)
                throw new ApiException(HttpStatus.BAD_REQUEST, "All co-host clubs must accept before submission.");
        }

        event.setStatus(EventStatusEnum.PENDING_UNISTAFF);
        eventRepo.save(event);
        notificationService.notifyUniStaffReadyForReview(event);

        return "üì§ Event '" + event.getName() + "' submitted to UniStaff (PENDING_UNISTAFF).";
    }
    @Override
    public List<EventResponse> getAllEvents() {
        return eventRepo.findAll()
                .stream()
                .map(this::mapToResponse)
                .toList();
    }
    @Override
    public List<EventRegistrationResponse> getRegisteredEventsByUser(Long userId) {
        return eventRegistrationRepo.findByUser_UserIdOrderByRegisteredAtDesc(userId)
                .stream()
                .map(r -> new EventRegistrationResponse(
                        r.getEvent().getEventId(),
                        r.getEvent().getName(),
                        r.getEvent().getDate(),
                        r.getStatus().name(),
                        (r.getEvent().getHostClub() != null)
                                ? r.getEvent().getHostClub().getName()
                                : "Unknown Club"
                ))
                .toList();
    }


}
